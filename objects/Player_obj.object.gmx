<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Player_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables for the player

moveSpeed = 1;              // How fast does the player accelerate?
jumpSpeed = 2;              // How high does the player jump acceletate? Also controls fall speed
maxMoveSpeed = 7;           // What is the maximum move speed of the player?
maxJumpSpeed = 10;          // What is the maximum jump speed of the player?

isGrounded = true;          // Is the player currently grounded?
isJumping = false;          // Is the player currently jumping?
hasDoubleJumped = false;    // Has the player already double jumped?
isMoving = false;           // Is the player RECEIVING input to move?
isDisplayingAttack = false; // Is the sprite currently set in displaying attacks?
moveDirection = "east"      // What direction is the player facing?

spawnX = x;                 // The X coord that the player will respawn at if they die
spawnY = y;                 // The Y coord that the player will respawn at if they die

soundWaveType = 0;          // Type of Wave: 0 = rock; 1 = electro; 2 = wind
unlockedShooting = true;    // Did the player unlock the ability to shoot waves?
unlockElectroWave = true;   // Did the player unlock the ability to shoot electro waves?
unlockWindWave = true;      // Did the player unlock the ability to shoot wind waves?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allows the sprite to return to non attack display, depending on curr action
isDisplayingAttack = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allows the player to fall once this is activated
isJumping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement

// This part deals with moving left and right, while checking if they can move to that spot.
if(keyboard_check(vk_right) &amp;&amp; place_meeting(x+moveSpeed,y,Terrain_obj) == false)
{
    image_speed = 0.3;
    image_xscale = 3;
    moveDirection = "east";
    isMoving = true;
    
    if(hspeed &gt; maxMoveSpeed)
        hspeed = maxMoveSpeed;
    else
        hspeed += moveSpeed;
         
}
else if(keyboard_check(vk_left) &amp;&amp; place_meeting(x-moveSpeed,y,Terrain_obj) == false)
{
    image_speed = 0.3;
    image_xscale = -3;
    moveDirection = "west";
    isMoving = true;
     
    if(hspeed &lt; -maxMoveSpeed)
        hspeed = -maxMoveSpeed;
    else
         hspeed -= moveSpeed;
}
else
{
    image_speed = 0.15;
    hspeed = 0;
    isMoving = false;
}

// This part checks if there's ground collision with the player.
if(isGrounded == true)
{
    // This activates the player's jump.
    if(keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_up))
    {
        isJumping = true;
        isGrounded = false;
        isMoving = true;
        alarm[0] = room_speed * 0.4;
    }    
    // If the player doesn't have any solid ground below them, they'll fall
    else if(place_meeting(x,y+jumpSpeed,Terrain_obj) == false)
    {
        isJumping = false;
        isGrounded = false;
    }
    // If the player is on a moving surface, the player will move with it.
    else if(place_meeting(x,y+jumpSpeed,MovingTerrain_obj) == true)
    {
        var platform = instance_find(MovingTerrain_obj, instance_position(x,y+jumpSpeed,MovingTerrain_obj));
        hspeed += platform.hspeed;
    }
}
else
{
    // If the player has the wind wave on, they can double jump.
    if(soundWaveType == 2 &amp;&amp; hasDoubleJumped == false &amp;&amp; (keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_up)))
    {
        isJumping = true;
        isMoving = true;
        alarm[0] = room_speed * 0.2;
        hasDoubleJumped = true;
    }
    
    // Controls whether the player is jumping or falling
    if(isJumping == true)
    {
        // If the player's head touched the roof
        if(place_meeting(x,y-jumpSpeed,Terrain_obj) == true)
        {
            isJumping = false;
            alarm_set(0,-1);
        }
        else
        {
            // The player accelerates to max jump speed;
            if(vspeed &lt; -maxJumpSpeed)
                vspeed = -maxJumpSpeed;
            else
                vspeed -= jumpSpeed;
        }
    }
    else
    {
        // If the player has landed on the ground
        if(place_meeting(x,y+jumpSpeed,Terrain_obj) == true)
        {  
            var yChange = y;
            while(place_meeting(x,yChange,Terrain_obj) == true)
                yChange -= 1;
            y = yChange;
            vspeed = 0;
            isGrounded = true;
            hasDoubleJumped = false;
        }
        else
        {
            // The player accelerates to max fall speed
            if(vspeed &gt; maxJumpSpeed)
                vspeed = maxJumpSpeed;
            else
                vspeed += jumpSpeed;
        }
    }
}

// This part handles sprite changing, depending on what the player is doing
if(isDisplayingAttack == false)
{
    if(isGrounded == true)
    {
        if(isMoving == true)
        {
            // If the player is moving and attacking
            if(keyboard_check_pressed(ord("Z")))
            {
                sprite_index = Player_AttackMove;
                isDisplayingAttack = true;
                alarm[1] = room_speed * 0.1;
            }
            else
                sprite_index = Player_Move;
        }
        else
        {
            // If the player is standing still and attacking
            if(keyboard_check_pressed(ord("Z")))
            {
                sprite_index = Player_AttackIdle;
                isDisplayingAttack = true;
                alarm[1] = room_speed * 0.1;
            }
            else
                sprite_index = Player_Idle;
        }
    }
    else
    {
         // If the player is in midair and attacking
         if(keyboard_check_pressed(ord("Z")))
         {
            sprite_index = Player_JumpAttack;
            isDisplayingAttack = true;
            alarm[1] = room_speed * 0.1;  
         }
         else
            sprite_index = Player_Jump;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="KillZone_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// The player is sent back to the beginning of the room

room_restart();
x = spawnX;
y = spawnY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Enemy_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// The player is sent back to the beginning of the room

if(other.isStunned == false)
{
    room_restart();
    x = spawnX;
    y = spawnY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoots out sound wave
if(unlockedShooting == true)
{ 
    var soundWave;    
    if(moveDirection == "east")
        soundWave = instance_create(x+moveSpeed+15,y+15,SoundWave_obj);
    else if(moveDirection == "west")
        soundWave = instance_create(x-moveSpeed-15,y+15,SoundWave_obj);
        
    soundWave.moveDirection = moveDirection;
    soundWave.waveType = soundWaveType;
    
    switch(soundWaveType)
    {
        case 0:
            soundWave.sprite_index = Rock_Wave_Sprite;
            break;
        case 1:
            soundWave.sprite_index = Electro_Wave_Sprite;
            break;
        case 2:
            soundWave.sprite_index = Wind_Wave_Sprite;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changes the type of SoundWave you have.

if(unlockedShooting == true)
{
    if(unlockWindWave == true &amp;&amp; unlockElectroWave == true)
    {
        if(soundWaveType == 2)
            soundWaveType = 0;
        else
            soundWaveType++;
    }
    else if(unlockElectroWave == true)
    {
        if(soundWaveType == 1)
            soundWaveType = 0;
        else
            soundWaveType++;
    }
    else
        soundWaveType = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
