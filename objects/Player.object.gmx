<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Player_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables for the player

moveSpeed = 5;              // How fast does the player move?
jumpSpeed = 5;              // How high does the player jump? Also controls fall speed
isGrounded = true;          // Is the player currently grounded?
moveDirection = "east"      // What direction is the player facing

unlockedShooting = true;    // Did the player unlock the ability to shoot waves?
soundWaveType = 0;          // Type of Wave: 0 = rock; 1 = electro; 2 = wind
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allows the player to fall once this is activated

vspeed = jumpSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Basic movement for the player

// This part deals with moving left and right, while checking if they can move to that spot.
if(keyboard_check(vk_right) &amp;&amp; place_meeting(x+moveSpeed,y,Ground) == false)
{
    image_speed = 0.3;
    hspeed = moveSpeed;
    image_xscale = 3;
    moveDirection = "east";
    sprite_index = Player_Move;
}
else if(keyboard_check(vk_left) &amp;&amp; place_meeting(x-moveSpeed,y,Ground) == false)
{
    image_speed = 0.3;
    hspeed = -moveSpeed;
    image_xscale = -3;
    moveDirection = "west";
    sprite_index = Player_Move;
}
else
{
    image_speed = 0.15;
    hspeed = 0;
    sprite_index = Player_Idle;
}

// This part checks if there's ground collision with the player.
if(isGrounded == true)
{
    // This controls the player's jump
    if(keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_up))
    {
        vspeed = -jumpSpeed;
        isGrounded = false;
        alarm[0] = room_speed * 0.5;
    }
    // If the player doesn't have any solid ground below them, they'll fall
    else if(place_meeting(x,y+jumpSpeed,Ground) == false)
    {
        vspeed = jumpSpeed;
        isGrounded = false;
    }
}
else
{
    // If the player has landed on the ground
    if(place_meeting(x,y+jumpSpeed,Ground) == true)
    {
        vspeed = 0;
        isGrounded = true;
    }
    // If the player's head touched the roof
    else if(place_meeting(x,y-jumpSpeed,Ground) == true)
    {
        vspeed = jumpSpeed;
        alarm_set(0,-1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoots out sound wave
if(unlockedShooting == true)
{ 
    
    var soundWave;    

    if(moveDirection == "east")
        soundWave = instance_create(x+moveSpeed+10,y+15,SoundWave);
    else if(moveDirection == "west")
        soundWave = instance_create(x-moveSpeed-10,y+15,SoundWave);
        
    soundWave.moveDirection = moveDirection;
    soundWave.waveType = soundWaveType;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
