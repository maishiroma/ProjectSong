<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Movable_Crate</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Terrain_obj</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Basic variables for this block

hsp = 0;                // Horizontal speed of block
vsp = 0;                // Vertical speed of block

isMoving = false;       // Did the sound wave hit this block?
movingRight = false;    // Is the block moving to the right? If not, it's moving to the left.
isGrounded = true;      // Is the block on solid ground?
moveSpeed = 5;          // How fast will this block move?
timeOfMovement = 0.2;   // How long will this block move?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Once called, the block will stop moving, if it's moving horizontally.

isMoving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Box Movement

// Horizontal movement
if(isMoving == true)
{
    if(movingRight == true)
        hsp += moveSpeed;
    else
        hsp -= moveSpeed;
        
    if(place_meeting(x,y+moveSpeed,Terrain_obj) == false)
        isMoving = false; 
}
else
{
    hsp = 0;
    if(place_meeting(x,y+moveSpeed, Terrain_obj) == false)
        isGrounded = false;
}

// Vertical movement 
if(isGrounded == true)
    vsp = 0;
else
    vsp += moveSpeed;

// If the box is on a moving surface, the box will move with it.
if(place_meeting(x,y+moveSpeed,MovingTerrain_obj) == true)
{
    var platform = instance_find(MovingTerrain_obj, instance_position(x,y+moveSpeed,MovingTerrain_obj));
    hsp += platform.hspeed;
}
if(place_meeting(x,y+moveSpeed,WindBlock_obj) == true)
{
    var block = instance_find(WindBlock_obj, instance_position(x,y+moveSpeed,WindBlock_obj));
    hsp += block.hsp;
}

// Horizontal collision
if(place_meeting(x+hsp,y,Terrain_obj) == true)
{
    while(!place_meeting(x+sign(hsp),y, Terrain_obj))
        x += sign(hsp);
    hsp = 0;
}
x += hsp;

// Vertical collision
if(place_meeting(x,y+vsp,Terrain_obj) == true)
{
    while(!place_meeting(x,y+sign(vsp),Terrain_obj))
        y += sign(vsp);
    
    // Is the box on the ground?
    if(sign(vsp) &gt; 0)
        isGrounded = true;
            
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="KillZone_obj">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>The block is destroyed</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="SoundWave_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If the sound wave is wind type, this activates a variable that allows this block to move.

if(other.waveType == 2)
{
    if(other.hspeed &gt; 0)
        movingRight = true;
    else
        movingRight = false;
    
     isMoving = true;
     alarm[0] = room_speed * timeOfMovement;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
